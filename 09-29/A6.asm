TITLE A6:ASSIGNMENT_6
.MODEL SMALL

;Pushing registers
SAVE_REGS MACRO REGS
	IRP D,<REGS>
		PUSH D
	ENDM
ENDM

;POPING REGISTERS
RESTORE_REGS MACRO REGS
	IRP D,<REGS>
		POP D
	ENDM
ENDM

;END OF THE PROGRAM
DOS_RTN MACRO
	MOV AH,4CH
	INT 21H
ENDM

; TO PRINT NEW LINE
NEW_LINE MACRO
	SAVE_REGS <AX,DX>
	MOV AH,2
	MOV DL,0DH
	INT 21H
	MOV DL,0AH
	INT 21H
	RESTORE_REGS <DX,AX>
ENDM

;TO DISPLAY THE MESSAGE TO ENTER A STRING
DISP_STR MACRO
	SAVE_REGS <AX,DX>
		LEA DX,MSG1
		MOV AH,9
		INT 21H
	RESTORE_REGS <DX,AX>
ENDM

.STACK 100H
.DATA
	MSG1 DB 'Enter a string:',0DH,0AH,'$'
	STR1 DB 80 DUP(0)
	STR2 DB 80 DUP(0)
	STR1_LEN DW ?
	STR2_LEN DW ?
	EQL_LEN DB 'Both the strings have equal length. $'
	NT_EQL DB 'Strings do not have equal length. $'
	STOP DW ?
	START DW ?
	FIRST DB 'STR1 is a substring of STR2. $'
	SECOND DB 'STR2 is a substring of OF STR1. $'
	NON DB 'Neither one is the substring of the other. $'
	SAME DB 'Both the strings are same. $'
.CODE

;MAIN PROCEDURE
MAIN PROC
	MOV AX,@DATA
	MOV DS,AX
	MOV ES,AX
	NEW_LINE
	DISP_STR
	LEA DI,STR1
	CALL READ_STR
	MOV STR1_LEN,BX
	NEW_LINE
	DISP_STR
	LEA DI,STR2
	CALL READ_STR
	MOV STR2_LEN,BX
	NEW_LINE
	CALL CHK_LEN
	NEW_LINE
	MOV AX,STR1_LEN
	CMP AX,0
	JE NO
	MOV BX,STR2_LEN
	CMP BX,0
	JE NO
	CMP AX,BX
	JG SCND
	JL FRST
		LEA SI,STR1
		LEA DI,STR2
		MOV BX,STR2_LEN
		MOV AX,STR1_LEN
		CALL CHK_SUBSTR
		CMP AX,2
		JE NO
		LEA DX,SAME
		JMP PRINT
	FRST:
		LEA SI,STR1
		LEA DI,STR2
		MOV BX,STR2_LEN
		MOV AX,STR1_LEN
		CALL CHK_SUBSTR
		CMP AX,2
		JE NO
		LEA DX,FIRST
		JMP PRINT
	SCND:
		LEA SI,STR2
		LEA DI,STR1
		MOV BX,STR1_LEN
		MOV AX,STR2_LEN
		CALL CHK_SUBSTR
		CMP AX,1
		JNE NO
		LEA DX,SECOND
		JMP PRINT
	NO:
		LEA DX,NON
	PRINT:
		MOV AH,9
		INT 21H
	NEW_LINE
	DOS_RTN
MAIN ENDP

;TO CHECK WHETHER A STRING IS A SUBSTRING OF THE OTHER OR NOT
CHK_SUBSTR PROC
	;SI: FOR SUBSTRING
	;DI: FOR MAIN STRING
	
		CLD
		MOV STOP,DI
		ADD STOP,BX
		MOV CX,AX
		SUB STOP,CX
		MOV START,DI
		MOV BX,SI
		R2:
			MOV CX,AX
			MOV DI,START
			MOV SI,BX
			REPE CMPSB
			JE YES
			INC START
			PUSH AX
			MOV AX,START
			CMP AX,STOP
			JNLE NO1
			POP AX
			JMP R2
		YES:
			MOV AX,1
			JMP RETURN
		NO1:
			POP AX
			MOV AX,2
		RETURN:
			RET
CHK_SUBSTR ENDP

;TO READ A STRING
READ_STR PROC
	;INPUT DI: effective address of the string
	;BX: no. of characters read
	SAVE_REGS <AX,DI>
	CLD
	XOR BX,BX
	MOV AH,1
	INT 21H
	LOOP1:
		CMP AL,0DH
		JE END1
		CMP AL,08H
		JNE E1
		DEC DI
		DEC BX
		JMP LOOPEND1
	E1:
		STOSB
		INC BX
	LOOPEND1:
		INT 21H
		JMP LOOP1
	END1:
		RESTORE_REGS <DI,AX>
		RET
READ_STR ENDP

;TO COMPARE LENGTHS OF THE 2 STRINGS
CHK_LEN PROC
	SAVE_REGS <AX,DX>
	MOV AX,STR1_LEN
	CMP AX,STR2_LEN
	JE EQL
		LEA DX,NT_EQL
		JMP ENDLEN
	EQL:
		LEA DX,EQL_LEN
	ENDLEN:
		MOV AH,9
		INT 21H
		NEW_LINE
	RESTORE_REGS <DX,AX>
	RET
CHK_LEN ENDP
END MAIN